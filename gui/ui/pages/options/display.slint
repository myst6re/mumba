import { Switch, ScrollView, SpinBox, ComboBox, GroupBox, Button, Palette, HorizontalBox, GridBox, LineEdit, VerticalBox } from "std-widgets.slint";
import { Installations, Fluent } from "../../global.slint";

export component OptionsDisplayPage inherits VerticalLayout {
    VerticalBox {
        Text {
            text: Fluent.get-message("options-page-display-title");
            font-size: 20px;
            wrap: word-wrap;
        }
    }

    ScrollView {
        vertical-stretch: 1;
        horizontal-stretch: 1;

        VerticalBox {
            max-width: 664px;

            GroupBox {
                title: Fluent.get-message("config-group-window-configuration");
                vertical-stretch: 0;

                VerticalBox {

                    HorizontalBox {
                        alignment: start;

                        fullscreen := Switch {
                            text: Fluent.get-message("config-fullscreen");
                            checked: Installations.ffnx-config.fullscreen;

                            toggled() => {
                                Installations.set-ffnx-config-bool("fullscreen", self.checked);
                                Installations.set-ffnx-config-int("current_resolution", resolution.current-index)
                            }
                        }
                        Switch {
                            text: Fluent.get-message("config-borderless");
                            checked: Installations.ffnx-config.borderless;

                            toggled() => {
                                Installations.set-ffnx-config-bool("borderless", self.checked)
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: start;

                        Text {
                            text: Fluent.get-message("config-window-size");
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        window-size-x := SpinBox {
                            minimum: 320;
                            maximum: 9999;
                            value: Installations.ffnx-config.window_size_x;

                            edited(value) => {
                                Installations.set-ffnx-config-int("window_size_x", value);
                                window-size-y.value = value * 3 / 4;
                                Installations.set-ffnx-config-int("window_size_y", window-size-y.value);
                            }
                        }

                        Text {
                            text: "x";
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        window-size-y := SpinBox {
                            minimum: 240;
                            maximum: 9999;
                            value: Installations.ffnx-config.window_size_y;

                            edited(value) => {
                                Installations.set-ffnx-config-int("window_size_y", value);
                                window-size-x.value = value * 4 / 3;
                                Installations.set-ffnx-config-int("window_size_x", window-size-x.value);
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: start;

                        Text {
                            text: Fluent.get-message("config-fullscreen-resolution");
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        resolution := ComboBox {
                            model: Installations.resolutions;
                            enabled: self.model.length > 1;
                            current-index: Installations.ffnx-config.current-resolution;

                            selected() => {
                                Installations.set-ffnx-config-int("current_resolution", self.current-index)
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: start;

                        Text {
                            text: Fluent.get-message("config-screen-refresh-rate");
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        ComboBox {
                            model: Installations.refresh-rates;
                            enabled: self.model.length > 1;
                            current-index: Installations.ffnx-config.current-refresh-rate;

                            selected() => {
                                Installations.set-ffnx-config-current-refresh-rate(resolution.current-index, self.current-index)
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: start;

                        Text {
                            text: Fluent.get-message("config-internal-resolution-scale");
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        ComboBox {
                            property<[int]> values: [0, 1, 2, 4, 8];
                            property<[int]> reverse: [0, 1, 2, 2, 3, 3, 3, 3, 4];
                            model: [Fluent.get-message("auto"), "x1", "x2", "x4", "x8"];
                            current-index: self.reverse[Installations.ffnx-config.internal-resolution-scale];

                            selected() => {
                                Installations.set-ffnx-config-int("internal_resolution_scale", self.values[self.current-index])
                            }
                        }
                    }

                    Rectangle {
                        vertical-stretch: 1;
                    }
                }
            }

            GroupBox {
                title: Fluent.get-message("config-group-graphics");
                vertical-stretch: 0;

                VerticalBox {
                    HorizontalBox {
                        alignment: start;

                        Text {
                            text: Fluent.get-message("config-renderer-backend");
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        ComboBox {
                            property<[int]> values: [0, 1, 3, 4, 5];
                            property<[int]> reverse: [0, 1, 0, 2, 3, 4];
                            model: [Fluent.get-message("auto"), "OpenGL", "Direct3D11", "Direct3D12", "Vulkan"];
                            current-index: self.reverse[Installations.ffnx-config.renderer_backend];

                            selected() => {
                                Installations.set-ffnx-config-int("renderer_backend", self.values[self.current-index])
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: start;

                        Text {
                            text: Fluent.get-message("config-enable-antialiasing");
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        ComboBox {
                            property<[int]> values: [0, 2, 4, 8, 16];
                            property<[int]> reverse: [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4];
                            model: [Fluent.get-message("disabled"), "2x", "4x", "8x", "16x"];
                            current-index: self.reverse[Installations.ffnx-config.enable_antialiasing];

                            selected() => {
                                Installations.set-ffnx-config-int("enable_antialiasing", self.values[self.current-index])
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: start;

                        Switch {
                            text: Fluent.get-message("config-enable-vsync");
                            checked: Installations.ffnx-config.enable_vsync;

                            toggled() => {
                                Installations.set-ffnx-config-bool("enable_vsync", self.checked)
                            }
                        }

                        Switch {
                            text: Fluent.get-message("config-enable-anisotropic");
                            checked: Installations.ffnx-config.enable_anisotropic;

                            toggled() => {
                                Installations.set-ffnx-config-bool("enable_anisotropic", self.checked)
                            }
                        }

                        Switch {
                            text: Fluent.get-message("config-enable-bilinear");
                            checked: Installations.ffnx-config.enable_bilinear;

                            toggled() => {
                                Installations.set-ffnx-config-bool("enable_bilinear", self.checked)
                            }
                        }
                    }
                }
            }

            Rectangle {
                vertical-stretch: 1;
            }
        }
    }
}
